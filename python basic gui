
___my first GUI ______
puting colour in background and length and title 
1>>>>...
from tkinter import *
window = Tk()
window.geometry("15x15")
window.title("my first gui")
window.config(background ="green")
window.mainloop()
__________________________________
2>>>>....

#label

from tkinter import *

window = Tk()

photo = PhotoImage(file="/storage/emulated/0/Download/IMG_20250928_130241.png")

label = Label(window,
              text="do you want to code",
              font=("Arial",10, "bold"),
              fg="pink",
              bg="green",
              padx=20,
              pady=10,
              image=photo,
              compound="bottom")
label.pack()

window.mainloop()

3>>>>....... 

click button 

from tkinter import *

def click():
    print("hello")

window = Tk()

button = Button(window, text="click")
button.config(command=click)  # perform call back of function
button.config(font=('Ink Free', 30, 'bold'))
button.config(bg='yellow')
button.config(fg='green')
button.config(activebackground='red')
button.config(activeforeground='blue')

image = PhotoImage(file="/storage/emulated/0/Download/IMG_20250928_130241.png")
button.config(image=image)
button.config(compound="top")
#button.config(state=DISABLED)//button uses to active or disable
button.pack()
window.mainloop()



-------- project on click code-------

from tkinter import *
count = 0
def click():
    global count
    count += 1
    label.config(text = count)
    label2.pack( )

window = Tk()

button = Button(window, text="click")
button.config(command=click)  # perform call back of function
button.config(font=('Ink Free', 30, 'bold'))
button.config(bg='yellow')
button.config(fg='green')
button.config(activebackground='red')
button.config(activeforeground='blue')

image = PhotoImage(file="/storage/emulated/0/Download/IMG_20250928_130241.png")
button.config(image=image)
button.config(compound="top")
#button.config(state=DISABLED)//button uses to active or disable
label = Label(window,text = count)
label.config(font =('monospace',50))
label.pack( )
label2 = Label(window,image = image)
button.pack()
window.mainloop()




4>>>>........
tkinter gui checkboxs in python 





from tkinter import *
from PIL import Image, ImageTk   # Pillow pip

def display():
    if x.get()==1 and y.get()==0:
        print("i like python")
    elif x.get()==0 and y.get()==1:
    	print("i like java")
    elif x.get()==1 and  y.get()==0:
    	print("i like both")
    else:
        print("i dont like either")

window = Tk()
x = IntVar()
y = IntVar()

#checkbox for python 
checkbox = Checkbutton(window, text="python", variable=x,
                       onvalue=1, offvalue=0, command=display)
checkbox.pack()
checkbox.config(font=("Arial", 30))
checkbox.config(bg="blue")
checkbox.config(fg="green")
checkbox.config(activeforeground="yellow")
checkbox.config(activebackground="red")

# PIL se image resize
img = Image.open("/storage/emulated/0/Download/Untitled design (3).png")
img = img.resize((50, 50))   # 
photo = ImageTk.PhotoImage(img)

checkbox.config(image=photo, compound="left", padx=20, pady=20)
checkbox.config(anchor = "w")#anchors width relative to cardinal direction

# checkbox for java

checkbox2 = Checkbutton(window, text="java", variable=y,
                       onvalue=1, offvalue=0, command=display)
checkbox2.pack()
checkbox2.config(font=("Arial", 30))
checkbox2.config(bg="blue")
checkbox2.config(fg="green")
checkbox2.config(activeforeground="yellow")
checkbox.config(activebackground="red")

# PIL se image resize karke lagana
img = Image.open("/storage/emulated/0/Download/Untitled design (2).png")
img = img.resize((50, 50))   # yaha size apne hisaab se set kar sakti ho
photo2 = ImageTk.PhotoImage(img)

checkbox2.config(image=photo2, compound="left", padx=20, pady=20)
checkbox.config(anchor = "w")#anchors width relative to cardinal direction


window.mainloop()




5>>>>........

tkinter gui listbox in python 
#listbox = a listing of selectable text items within it's own cintainer 
def submit():
      food = []
      for index in listbox.curselection():
      	food.insert(index,listbox.get(index))
      for index in food:
      	print(index)
      
def add():
	listbox.insert(listbox.size(),entrybox.get())
	listbox.config(height = listbox.size())
	entrybox.delete(0,END)
	entrybox.focus_set()
#listbox.size() give the next ind3xnumber like  6. then from entry box chocolate
def delete ():
	for index in reversed(listbox.curselection()):
		listbox.delete(index)
	
	#listbox.delete(listbox.curselection())
	listbox.config(height = listbox.size())

   

from tkinter import *

window =Tk()
listbox = Listbox(window,
                                  bg = "purple",
                                  font = ("constantia",20),
                                  width = 12 ,
                                  selectmode = MULTIPLE
                                  )#can selecte multiple like if we want to selecte multiple item or delete multiplie item at a time 
                                  
listbox.pack()
listbox.insert(1,"pizza")
listbox.insert(2,"pasta")
listbox.insert(3,"chiken")
listbox.insert(4,"noodles")
listbox.insert(5,"rice")
listbox.config(height = listbox.size())


entrybox = Entry(window)
entrybox.pack()
submitButton = Button(window, text = "submit",command = submit)# window // we can use frame too 
submitButton.pack()
addButton = Button(window, text = "add",command = add)
addButton.pack() # window // we can use frame too 
deleteButton = Button(window, text = "delete",command = delete)
deleteButton.pack() # window // we can use frame too 
window.mainloop()



6>>>>.....


from tkinter import *
from PIL  import Image, ImageTk #pillow import
def submit() :
	print("the temprature is"+str(scale.get())+"degree C")

window = Tk()
hotimg =Image.open("/storage/emulated/0/Download/Untitled design (7).png").resize((150,150))
hotimage = ImageTk.PhotoImage(hotimg)
hotLabel = Label(window,image = hotimage)
hotLabel.pack()
scale = Scale(window,
                            from_ =100,
                            to = 0,
                            orient = VERTICAL,
                            tickinterval = 10 ,#adds numeric indicators for value 
                            font = ("Arial",20),
                            resolution = 5 ,#increament of slider 
                            bg = "black",
                            fg = "red",
                            troughcolor = "blue",
                            length = 600,
                            width = 70
                           )
scale.set((scale['from']-scale['to']/2))        
scale.pack()    
coldimg = Image.open( "/storage/emulated/0/Download/Untitled design (8).png").resize((150,150))
coldimage = ImageTk.PhotoImage(coldimg)
coldLabel = Label(window,image = coldimage)
coldLabel.pack()            
button = Button(window,text = "submit",command = submit)
button.pack()                           
                           
window.mainloop()

7>>>>........

______python colour choose gui _____


from tkinter import *
from tkinter import colorchooser #submodule
def click():
	color = colorchooser.askcolor()
	if color[1]is not None :#check if user picked a colour 
		colorHex = color[1]
		window.config(bg = colorHex)


window = Tk()
window.geometry("420x420")
button = Button(text = "click me" , command = click)
button.pack()
window.mainloop()


8>>>>........
__________python text widgets gui _______
#text widgt = function likes a text area , you can enter multiple area of text 
from tkinter import*

def submit ():
	input = text.get("1.0",END)
	print(input)
window = Tk()
text = Text(window,
                       bg ="light yellow",
                       fg = "purple",
                       padx = 20,
                       pady = 20,
                       height = 10,
                       width = 20,
                       font = ("bold",20))
text.pack()
button = Button (window , text ="submit",command = submit)
button.pack()
window.mainloop()

9>>>>........

_______opening file in python ______

#opening a file filedialog (tkinter module)
from tkinter import *
from tkinter import filedialog

def openfile():
	filepath = filedialog.askopenfilename(initialdir ="C:users/Cakow/PycharmProjects/Main",
	title = "open file",
	filetypes =(("text files","*.txt") ,	                       ("all files","*.*")))
	if filepath:
	    with open(filepath,'r' ) as file:
	    	print(file.read())
	    	file.close()
	 
	
window = Tk()
button = Button(window,text="open",command = openfile)
button.pack()
window.mainloop()


10>>>>,......
______saving a file in python gui______from tkinter import *
from tkinter import filedialog

def savefile():
    file = filedialog.asksaveasfile(
        defaultextension='.txt',
        filetypes=[("Text file", "*.txt"),
                   ("HTML file", "*.html"),
                   ("All files", "*.*")]
    )
    if file is not None:   #if user don't cancel'
        filetext = str(text.get(1.0, END))
        file.write(filetext)
        file.close()

window = Tk()

button = Button(window, text="savefile", command=savefile)
button.pack()

text = Text(window)
text.pack()

window.mainloop()



11>>> ...........
_____menubar gui python ______________

#menubar
from tkinter import *

def openFile():
	print("file has been opened")
def saveFile():
	print("file has been saved")
def copy():
	print("file copied")
def cut():
	print("file cut")
def paste():
	print("file pasted")

window = Tk()


menubar = Menu(window)
window.config(menu = menubar)
filemenu = Menu(menubar,tearoff = 0)
menubar.add_cascade(label = "File" ,menu = filemenu)
filemenu.add_command(label = "open",command =openFile)
filemenu.add_command(label = "save",command = saveFile)
filemenu.add_separator()
filemenu.add_command(label = "exist",command = quit )

editmenu = Menu(menubar,tearoff=0)

menubar.add_cascade(label = "edit",menu = editmenu)
editmenu.add_command(label ="copy",command = copy)
editmenu.add_command(label ="cut",command = cut)
editmenu.add_command(label ="paste",command = paste)


window.mainloop()




12>>>>..,....,......
___________gui ( frames) in python _____
#frames = are a rectangular container to group and hold widgets
from tkinter import *
window = Tk()
window.config(bg = "purple")
frame = Frame(window,bg = "blue",bd =5)
frame.pack()

Button(window,text = "s",font=("consolas",20),width = 1,fg ="red").pack(side =BOTTOM)
Button(window,text = "u",font=("consolas",20),width =1,fg = "red").pack(side =BOTTOM)
Button(window,text = "p",font=("consolas",20),width =1,fg = "red").pack(side =BOTTOM)
Button(window,text = "e",font=("consolas",20),width =1,fg = "red").pack(side =BOTTOM)
Button(window,text = "r",font=("consolas",20),width =1,fg = "red").pack(side =BOTTOM)
Button(window,text = "s",font=("consolas",20),width =1,fg = "red").pack(side =LEFT)
Button(window,text = "a",font=("consolas",20),width =1,fg = "red").pack(side =LEFT)
Button(window,text = "i",font=("consolas",20),width =1,fg = "red").pack(side =LEFT)
Button(window,text = "y",font=("consolas",20),width =1,fg = "red").pack(side =LEFT)
Button(window,text = "a",font=("consolas",20),width =1,fg = "red").pack(side =LEFT)
Button(window,text = "n",font=("consolas",20),width =1,fg = "red").pack(side =LEFT)

window.mainloop()



13>>>......
_____________gui ( new window on old window) in python __________________
from tkinter import *
def creat_window():
       new_window = Toplevel()
       new_window.config(bg = "blue")
       new_window.title ("new window")
       
        
          #new window on top of other windows linked to the buttom window 
       #old_window.destroy // it's will destry the old window '
old_window = Tk()
Button(old_window,text = "creat new window",command = creat_window).pack()
old_window.mainloop()


14>>>>...........
___________progressbar_________
from tkinter import *
from tkinter.ttk import *

def start():     # progress bar reset
    bar['value'] = 0
    download = 0
    speed = 1

    def step():   # inner function
        nonlocal download   # nonlocal bcz we want to change the value of download
        if download < 100:
            download += speed
            bar['value'] = (download / 100) * 100
            percent.set(f"{int((download/100)*100)}%")
            text.set(f"{download}/100 MB completed")
            window.after(50, step)  # after 50 millisecond it's again call step function

    step()  # first call

# ---------------- GUI setup -----------------
window = Tk()

percent = StringVar()
text = StringVar()

bar = Progressbar(window, orient=HORIZONTAL, length=500, maximum=100)
bar.pack(pady=10)

Label(window, textvariable=percent).pack()
Label(window, textvariable=text).pack()

Button(window, text="Download", command=start).pack()

window.mainloop()


15>>>>>.........
_______gui(canvas project)__________
from tkinter import *
window = Tk()

canvas = Canvas(window,height = 550,width = 550,bg ="light blue")
#to draw lines
#canvas.create_line(0,0,500,500,fill ="blue",width = 5)
#canvas.create_line(0,500,500,0,fill ="red",width =5)#diagonal line 
#to draw rectangle
#canvas.create_rectangle(50,200,200,100,fill ="green")

#to draw polygonal
#canvas.create_polygon(250,0,500,500,0,500,fill ="purple",width =5)
#draw arch 
#canvas.create_arc(0,500,500,0,fill ="yellow",style = PIESLICE,start = 90,width = 5)

#a project

canvas.create_arc(10,10,500,500,fill="white",style = PIESLICE,width =10,start =180,extent = 180)
canvas.create_arc(10,10,500,500,fill="red",style = PIESLICE,width =10,start =0,extent = 180)
canvas.create_oval(190,190,310,310,fill = "white",width =10)

canvas.pack()
window.mainloop()
16>>>>.......
_________gui house project ___________
from tkinter import *
window = Tk()
canvas = Canvas(window,height = 500 ,width = 500,bg ="skyblue")
canvas.pack()

#___ ground_____
canvas.create_rectangle(0,400,500,500,fill="green",outline ="")
#____housebody____
canvas.create_rectangle(150,250,350,400,fill ="burlywood3",outline ="black",width =3)
#___roof(triangle)_____
canvas.create_polygon(150,250,350,250,250,150,fill ="brown",outline ="black",width = 3)
#____door__________&
canvas.create_rectangle(230,320,270,400,fill = "saddlebrown",outline = "black",width = 3)
#_____windows_______
canvas.create_rectangle(170,280,210,320,fill = "light yellow",outline = "black",width = 3)

canvas.create_rectangle(290,280,330,320,fill = "light yellow",outline = "black",width = 3)
#_______sun___________
canvas.create_oval(50,50,120,120,fill ="yellow",outline ="orange",width=3)
#_____cloudes________
canvas.create_oval(350,80,420,120,fill = "white",outline = "")
canvas.create_oval(380,60,450,110,fill = "white",outline = "")
canvas.create_oval(400,80,470,120,fill = "white",outline = "")


window.mainloop()



16>>>>>.........
___________gui( drag and drop)________


from tkinter import *

def drag_start(event):
	widget = event.widget
	widget.startX = event.x
	widget.startY = event.y
def drag_Motion(event):
	widget =event.widget
	x =widget.winfo_x()-widget.startX + event.x
	y =widget.winfo_y()-widget.startY + event.y
	widget.place(x=x,y=y)


window = Tk()

label = Label(window,bg ="red",width =10,height = 5)
label.place(x=0,y=0)
label.bind("<Button-1>",drag_start)
label.bind("<B1-Motion>",drag_Motion)

label2= Label(window,bg ="green",width =10,height = 5)
label2.place(x=0,y=0)
label2.bind("<Button-1>",drag_start)
label2.bind("<B1-Motion>",drag_Motion)

label3 = Label(window,bg ="purple",width =10,height = 5)
label3.place(x=60,y=60)
label3.bind("<Button-1>",drag_start)
label3.bind("<B1-Motion>",drag_Motion)

label4 = Label(window,bg ="yellow",width =10,height = 5)
label4.place(x=50,y=50)
label4.bind("<Button-1>",drag_start)
label4.bind("<B1-Motion>",drag_Motion)

label5 = Label(window,bg ="pink",width =10,height = 5)
label5.place(x=30,y=30)
label5.bind("<Button-1>",drag_start)
label5.bind("<B1-Motion>",drag_Motion)

label6 = Label(window,bg ="blue",width =10,height = 5)
label6.place(x=10,y=10)
label6.bind("<Button-1>",drag_start)
label6.bind("<B1-Motion>",drag_Motion)




window.mainloop()


17>>>.......
_________gui(image move in python on windows) _________'



from tkinter import *
from PIL import Image,ImageTk #pilow import
def move_up(event):
	label.place(x=label.winfo_x() ,y=label.winfo_y()-10)
def move_down(event):
	label.place(x=label.winfo_x() ,y=label.winfo_y()+10)

def move_left(event):
	label.place(x=label.winfo_x()-10,y=label.winfo_y())

def move_right(event):
	label.place(x=label.winfo_x() +10 ,y=label.winfo_y())



window = Tk()

window.bind("<w>",move_up)
window.bind("<s>",move_down)
window.bind("<a>",move_left)
window.bind("<d>",move_right)
window.bind("<Up>",move_up)
window.bind("<Down>",move_down)
window.bind("<Left>",move_left)
window.bind("<Right>",move_right)


img = Image.open("/storage/emulated/0/Download/Untitled design (9).png").resize((120,120))
myimage = ImageTk.PhotoImage(img)
label = Label(window,image = myimage)
label.place(x=0,y=0)

window.mainloop()



18>>>>>......
__________ gui ( images moving in canvas)___________

from tkinter import *
from PIL import Image,ImageTk  #import pillow

def move_up():
	canvas.move(myimage,0,-10)
def move_down():
	canvas.move(myimage,0,10)	
def move_left():
	canvas.move(myimage,-10,0)
def move_right():
	canvas.move(myimage,10,0)


window = Tk()

#window.bind("<w>",move_up)       |
#window.bind("<a>",move_down)  | i dont'
#window.bind("<p>",move_right)    |have 
#window.bind("<r>",move_left)        | pc so
#                                 								   | i can't'
#                                 								   | use it 
#                                 								   | here

# i can make button on android so i am doing this when i will use this 

#def move_up(event):
#	canvas.move(myimage,0,-10)
#def move_down(event):
#	canvas.move(myimage,0,10)	
#def move_right(event):
#	canvas.move(myimage,-10,0)
#def move_left(event):
#	canvas.move(myimage,10, 0) i have to use event here but i am using button so for now only this():
canvas = Canvas(window,width = 500,height = 500,bg ="green")
canvas.pack()	
	
# Road (red)
canvas.create_rectangle(100, 0, 200, 500, fill="white",outline = "black")
canvas.create_rectangle(0, 200, 500, 300, fill="white",outline ="black")

# Blocks (green)
canvas.create_rectangle(0, 0, 100, 200, fill="green")
canvas.create_rectangle(200, 0, 500, 200, fill="green")	
	
Button(window,text ="↑",command = move_up,bg = "black",fg="white").place(x=50,y=530)
Button(window,text ="↓",command = move_down,bg = "black",fg="white").place(x=120,y=530)
Button(window,text =" ← ",command = move_left,bg = "black",fg="white").place(x=190,y=530)
Button(window,text ="→",command = move_right,bg = "black",fg="white").place(x=260,y=530)

img = Image.open("/storage/emulated/0/Download/Untitled design (11).png").resize((100,100))

photoimage = ImageTk.PhotoImage(img)
myimage = canvas.create_image(0,0,image = photoimage,anchor = NW)



window.mainloop()

19>>>>.........
___________gui ( animation) ____________



from tkinter import *
from PIL import Image ,ImageTk #import pillow
import time 
WIDTH = 500
HEIGHT = 500
xVelocity = 3
yVelocity = 2

window = Tk()
window.config(bg="#0b1d3a")
canvas = Canvas(window,width = WIDTH ,height = HEIGHT)
canvas.pack()
#backgroung image _________
bg = Image.open("/storage/emulated/0/Untitled design (12).png").resize((500,500))
bg_image = ImageTk.PhotoImage(bg)
canvas.create_image(0,0,image = bg_image,anchor = NW)



#ghost image ________
img = Image.open("/storage/emulated/0/Pictures/file_00000000cf9061f7aaca0dd682a9d267.png").resize((200,200))
myimage = ImageTk.PhotoImage(img)
ghost = canvas.create_image(250,250,image = myimage,anchor = CENTER)

image_width = 200
image_height = 200

while True:
	coordinates = canvas.coords(ghost)
	print(coordinates)
	#bouns condition
	if (coordinates[0] >= (WIDTH - image_width//2) or coordinates[0] <=image_width//2):
		xVelocity = -xVelocity
		
	if (coordinates[1] >= (WIDTH - image_height//2) or coordinates[1] <=image_width//2):
		yVelocity = -yVelocity	
		
	canvas.move(ghost,xVelocity,yVelocity)
		
	window.update()
	time.sleep(0.01)

window.mainloop()





20>>>>......
_______'_______ gui ( multiple animation)____________________


from tkinter import *
import time 
#ball class 
class Ball:
		def __init__(self,canvas,x,y,diameter,xVelocity,yVelocity,color):
			self.canvas = canvas
			self.image = canvas.create_oval(x,y,x +diameter, y + diameter , fill = color)
			self.xVelocity = xVelocity
			self.yVelocity = yVelocity
		def move(self):
			coordinates = self.canvas.coords(self.image)
			if (coordinates[2]>=(self.canvas.winfo_width()) or coordinates [0]<0):
				self.xVelocity = -self.xVelocity
			if (coordinates[3]>=(self.canvas.winfo_height()) or coordinates [1]<0):
				self.yVelocity = -self.yVelocity
			#moves ball	
			self.canvas.move(self.image,self.xVelocity,self.yVelocity)
	
#main window

window = Tk()

WIDTH = 500
HEIGHT = 500

canvas = Canvas(window, width = WIDTH, height = HEIGHT,bg = "#D29B86")
canvas.pack()
volly_ball = Ball(canvas,0,0,100,2,3,"pink")
v_ball = Ball(canvas,0,0,90,1,2,"peachpuff")
vo_ball = Ball(canvas,0,0,120,3,2,"bisque")
vol_ball = Ball(canvas,0,0,150,2,2,"tan")

while True :
	volly_ball.move()
	v_ball.move()
	vo_ball.move()
	vol_ball.move()
	window.update()
	time.sleep(0.01)
window.mainloop()

	

21>>>>>..........
_____________ gui ( clock program)_______

from tkinter import *
from time import *

def update():
	time_string = strftime("%I:%M:%S %P")
	time_label.config(text = time_string)
	
	day_string = strftime("%A")
	day_label.config(text=day_string)
	
	date_string = strftime("%B  %d %Y")
	date_label.config(text =date_string)
	
	window.after(1000,update)

window = Tk()
window.config(bg = 'black')
time_label = Label(window,font =("Arial",20),fg ="#00FF00",bg = "black")
time_label.pack()

day_label = Label(window,font=("Verdana",15),fg ="white",bg ="black")
day_label.pack()
date_label = Label(window,font =("Verdana",15),fg = "white",bg = "black")
date_label.pack()

update()
window.mainloop()



22>>>>>..........
___________ gui ( calculator app) _______


from tkinter import *

def button_press(num):
	global equation_text
	equation_text = equation_text  + str(num)
	equation_label.set(equation_text)
	

def equal():
	global equation_text
	try:
		total = str(eval(equation_text))
		equation_label.set(total)
		equation_text = total
	except SyntaxError:
		equation_label.set("syntax  error")
		equation_text = ""
		
		
		
	except ZeroDivisionError:
		equation_label.set("arithmatic error")
		equation_text = ""
	
	
def clear_display():
	global equation_text
	equation_label.set("")
	equation_text = ""
	


window = Tk()
window.title("calculater programm")
window.geometry("500x500")


equation_text = ""
equation_label =StringVar()

label = Label(window,textvariable = equation_label,font = ("consolas",20),bg="black",fg = "white",width = 34,height =2)
label.pack()

frame = Frame(window)
frame.pack()
#number button
button1 = Button(frame,text = "1",width = 3,height = 1,font = ("Arial",15), bg = "#000080",fg = "white", command = lambda : button_press(1))
button1.grid(row=0,column=0)

button2 = Button(frame,text = "2",width = 3,height = 1,font = ("Arial",15), bg = "#000080",fg = "white", command = lambda : button_press(2))
button2.grid(row=0,column=1)

button3 = Button(frame,text = "3",width = 3,height = 1,font = ("Arial",15), bg = "#000080",fg = "white", command = lambda : button_press(3))
button3.grid(row=0,column=2)

button4 = Button(frame,text = "4",width = 3,height = 1,font = ("Arial",15), bg = "#000080",fg = "white", command = lambda : button_press(4))
button4.grid(row=1,column=0)

button5 = Button(frame,text = "5",width = 3,height = 1,font = ("Arial",15), bg = "#000080",fg = "white", command = lambda : button_press(5))
button5.grid(row=1,column=1)

button6 = Button(frame,text = "6",width = 3,height = 1,font = ("Arial",15), bg = "#000080",fg = "white", command = lambda : button_press(6))
button6.grid(row=1,column=2)

button7 = Button(frame,text = "7",width = 3,height = 1,font = ("Arial",15), bg = "#000080",fg = "white", command = lambda : button_press(7))
button7.grid(row=2,column=0)

button8 = Button(frame,text = "8",width = 3,height = 1,font = ("Arial",15), bg = "#000080",fg = "white", command = lambda : button_press(8))
button8.grid(row=2,column=1)

button9 = Button(frame,text = "9",width = 3,height = 1,font = ("Arial",15), bg = "#000080",fg = "white", command = lambda : button_press(9))
button9.grid(row=2,column=2)

button0 = Button(frame,text = "0",width = 3,height = 1,font = ("Arial",15), bg = "#000080",fg = "white", command = lambda : button_press(0))
button0.grid(row=3,column=0)

#symbol button

plus = Button(frame,text = "+",width = 3,height = 1,font = ("Arial",15), bg = "#000080",fg = "white", command = lambda : button_press("+"))
plus.grid(row=0,column=3)

minus = Button(frame,text = "-",width = 3,height = 1,font = ("Arial",15), bg = "#000080",fg = "white", command = lambda : button_press("-"))
minus.grid(row=1,column=3)

multiply = Button(frame,text = "*",width = 3,height = 1,font = ("Arial",15), bg = "#000080",fg = "white", command = lambda : button_press("*"))
multiply.grid(row=2,column=3)

divide = Button(frame,text = "/",width = 3,height = 1,font = ("Arial",15), bg = "#000080",fg = "white", command = lambda : button_press("/"))
divide.grid(row=3,column=3)

equal_button = Button(frame,text = "=",width = 3,height = 1,font = ("Arial",15), bg = "#000080",fg = "white", command = equal)
equal_button.grid(row=3,column=2)

decimal = Button(frame,text = ".",width = 3,height = 1,font = ("Arial",15), bg = "#000080",fg = "white", command = lambda : button_press("."))
decimal.grid(row=3,column=1)

clear = Button(frame,text ="clear",width =18,height = 1,font = ("Arial",15),bg = "#000080",fg = "white",command =clear_display)
clear.grid(row = 4, column = 0,columnspan=4,sticky = "ew")
window.mainloop()
#fucking 1 hour 52 min goshhhhhhhhhh




23>>>>.........

___________ gui ( tik-tak-toe) ________


from tkinter import *
import random



def  next_turn(row,column):
	global player
	if buttons[row][column]["text"]=="":
		buttons[row][column]["text"]=player
		result = check_winner()
		if result== True:
			label.config(text = player + " win")
		elif result == "Tie":
			label.config(text = "it's a tie")
		else :
			player = "0" if player == "x" else "x"
			label.config(text = player + "turn")
#Agar abhi player "X" hai → next turn "O" ka hoga

#Agar abhi player "O" hai → next turn "X" ka hoga	


def check_winner():
	for i in range (3):
		if (buttons[i][0]['text']==buttons[i][1]['text']==buttons[i][2]['text'] != ""):
			buttons[i][0].config(bg = "lightgreen")
			buttons[i][1].config(bg = "lightgreen")
			buttons[i][2].config(bg = "lightgreen")
			return True
	for j in range (3):
		if (buttons[0][j]['text']==buttons[1][j]['text']==buttons[2][j]['text'] != ""):
			buttons[0][j].config(bg = "lightgreen")
			buttons[1][j].config(bg = "lightgreen")
			buttons[2][j].config(bg = "lightgreen")
			return True
		if (buttons[0][0]['text']==buttons[1][1]['text']==buttons[2][2]['text'] != ""):
			buttons[0][0].config(bg = "lightgreen")
			buttons[1][1].config(bg = "lightgreen")
			buttons[2][2].config(bg = "lightgreen")
			return True
		if (buttons[0][2]['text']==buttons[1][1]['text']==buttons[2][0]['text'] != ""):
			buttons[0][2].config(bg = "lightgreen")
			buttons[1][1].config(bg = "lightgreen")
			buttons[2][0].config(bg = "lightgreen")
			return True
		filled = True
		for i in range (3):
			for j in range (3):
				if buttons[i][j]['text'] == "":
					filled = False 
		if filled :
			for i in range(3):
				for j in range (3):
					buttons[i][j].config(bg = "red")
			return "Tie"
		return False



def new_game():
	global player
	player = random.choice(players)
	label.config(text = player + "turn")
	for row in range(3):
		for column in range(3):
			buttons[row][column].config(text ="",bg = "white")
	
window = Tk()
window.title("tik-tak_toe game")
window.config(bg = "pink")
players = ["x","0"]
player = random.choice(players)
buttons = [[0,0,0],
                      [0,0,0],
                      [0,0,0]]
                      
label = Label(text = player + "turn",font=("Arial",20),bg = "lightpink")
label.pack(side ="top")

restart_button = Button(text = "restart",font = ("Arial",20),bg = "lightpink",command = new_game)
restart_button.pack(side = "top")



frame = Frame(window)
frame.pack()

for row in range(3):
    for column in range(3):
        buttons[row][column] = Button(
            frame,
            text="",
            font=("Arial", 20),
            width=3,
            height=1,
            command=lambda row=row, column=column: next_turn(row, column)
        )
        buttons[row][column].grid(row=row, column=column)
window.mainloop()
#fuckin 1 hour 45 min 



24>>>>>.............
_____________gui( snake game) __________

from tkinter import *
import random

GAME_WIDTH = 600
GAME_HEIGHT = 600
SPEED = 100
SPACE_SIZE = 20
BODY_PARTS = 5
SNAKE_COLOR = "#00FF00"
FOOD_COLOR = "#FF0000"
BACKGROUND_COLOR ="black"

class Snake :
	def __init__(self):
		self.body_size = BODY_PARTS
		self.coordinates = []
		self.square = []
		for i in range (0,BODY_PARTS):
			self.coordinates.append([0,0])
		for x,y in self.coordinates :
				square = canvas.create_rectangle(x,y,x+SPACE_SIZE ,y+SPACE_SIZE,fill =SNAKE_COLOR ,tag = "snake")
				self.square.append(square)
class Food:
	def __init__(self):
		x = random.randint(0,(GAME_WIDTH//SPACE_SIZE )- 1) * SPACE_SIZE
		y = random.randint(0,(GAME_HEIGHT//SPACE_SIZE )- 1) * SPACE_SIZE
		self.coordinates = [x,y]
		canvas.create_oval(x,y,x+SPACE_SIZE,y+SPACE_SIZE,fill =FOOD_COLOR ,tag = "food" )
	
	
def next_turn(snake,food):
	x,y = snake.coordinates[0]
	if direction == "up":
		y -= SPACE_SIZE
		
	elif direction == "down":
		y += SPACE_SIZE
		
	elif direction == "left":
		x -= SPACE_SIZE
		
	elif direction == "right":
		x += SPACE_SIZE
	snake.coordinates.insert(0,(x,y))
	square = canvas.create_rectangle(x,y,x+SPACE_SIZE ,y+SPACE_SIZE,fill =SNAKE_COLOR )
	snake.square.insert(0,square)
	if x == food.coordinates[0] and y == food.coordinates[1]:
		global score 
		score += 1
		label.config(text = "score :{}".format(score))
	else:
		del snake.coordinates[-1]#postion del
		canvas.delete(snake.square[-1])#del from screen
		del snake.square[-1]#del from list
		
	if check_collision(snake):
		game_over()
	else:
		window.after(SPEED,next_turn,snake,food)
		
def change_direction(new_direction):
		global direction
		if new_direction == "left":
				if direction != "right":
					direction = new_direction
		elif new_direction == "right":
				if direction != "left":
					direction = new_direction
		elif new_direction == "up":
				if direction != "down":
					direction = new_direction
		elif new_direction == "down":
				if direction != "up":
					direction = new_direction
	

		
def check_collision(snake):
	x,y = snake.coordinates[0]
	if x<0 or x>=GAME_WIDTH:
		return True
	elif x<0 or x>=GAME_WIDTH:
		return True
	for body_part in snake.coordinates[1:]:
		if x == body_part[0]and y== body_part[1]:
			return True
	return False
		
def game_over():
	canvas.delete(ALL)
	canvas.create_text(canvas.winfo_width()/2,canvas.winfo_height()/2,font = ("Arial",20),fil = "red",text = "gameover")
	
window = Tk()
window.title("snake game")
window.resizable(False,False)

score =0
direction = 'down'

label = Label(window,text = "score :{}".format(score),font = ("Arial",20))
label.pack()

canvas = Canvas(window,bg = BACKGROUND_COLOR,width =GAME_WIDTH,height = GAME_HEIGHT)
canvas.pack()
#window.bind('<Left>', lambda event: change_direction('left'))
#window.bind('<Right>', lambda event: #change_direction('right'))
#window.bind('<Up>', lambda event: change_direction('up'))
#window.bind('<Down>', lambda event: change_direction('down'))

#[if i have pc i will use bind but i can't so i am using bellow making button']
frame = Frame(window,bg = "black")
frame.pack()

up_button = Button(frame, text="↑", command=lambda: change_direction("up"))
up_button.pack(side = LEFT,padx = 5)

down_button = Button(frame, text="↓", command=lambda: change_direction("down"))
down_button.pack(side = LEFT,padx = 5)

left_button = Button(frame , text="←", command=lambda: change_direction("left"))
left_button.pack(side=LEFT,padx = 5)

right_button = Button(frame , text="→", command=lambda: change_direction("right"))
right_button.pack(side=LEFT,padx = 5)


snake = Snake()
food = Food()

next_turn(snake,food)

window.mainloop()
#are you fucking k8dding meeeeeeeee
#5 hours wtfffffffffffffffff
















